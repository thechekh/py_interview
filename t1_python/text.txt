Загальне з Computer Science та Web Development:
1.Що таке інженерія і процес розробки загалом?
2.Які знаєте принципи програмування?
3.Чим відрізняються процедурна та об’єкто-орієнтована парадигми програмування?
4.Які основні принципи ООП (наслідування, інкапсуляція, поліморфізм)?
5.Що таке множинне наслідування?
6.Які є шість етапів розробки продукту в Software Development lifecycle і яка різниця між Agile і Kanban?
7.Які є методи HTTP-запитів та яка між ними різниця?
8.Як виглядають HTTP-request/response?
9.Що таке авторизація і як вона працює?
10.Що таке cookies?
11.Що таке вебвразливість?
12.Які знаєте класичні бази даних?
13.Як читати специфікацію в конкретній мові (наприклад, PEP8 у Python)?
14.Як відбувається взаємодія клієнта і сервера?
15.Які є підходи до проєктування API?
16.Як використовувати патерни програмування?
17.Що таке Acceptance Testing і навіщо його використовують?
18.Що таке модульні та інтеграційні тести, API-тести?
19.Як писати unit-тести?
20.Які є best practices у написанні автотестів?
21.Які базові команди системи контролю версій?
22.Як використовувати Git?
23.У чому різниця між хешуванням і шифруванням?

Python:
+ 24.Python — мова, що інтерпретується чи компілюється?
+ 25.Які є змінні та незмінні типи даних?
+ 26.Що таке область видимості змінних?
+ 27.Що таке introspection?
+ 28.Різниця між is і ==?
+ 29.Різниця між __init__() і __new__()?
+ 30.У чому різниця між потоками та процесами?
+ 31.Які є види імпорту?
+ 32.Що таке клас, ітератор, генератор?
+ 33.Що таке метаклас, змінна циклу?
+ 34.У чому різниця між ітераторами та генераторами?
+ 35.У чому різниця між staticmethod та classmethod?
+ 36.Як працюють декоратори, контекстні менеджери?
+ 37.Як працюють dict comprehension, list comprehension і set comprehension?
38.Чи можна використовувати кілька декораторів для однієї функції?
39.Чи можна створити декоратор з класу?
40.Які є основні популярні пакети (requests, pytest, etc)?
41.Що таке lambda-функції?
42.Що означає *args, **kwargs та як вони використовуються?
43.Що таке exceptions, <try-except>?
44.Що таке PEP (Python Enhancement Proposal), які з них знаєте (PEP 8, PEP 484)?
45.Напишіть hello-world сервіс, використовуючи один із фреймворків.
46.Які є типи даних і яка різниця між list і tuple, навіщо вони?
47.Як використовувати вбудовані колекції (list, set, dictionary)?
48.У чому полягає складність доступу до елементів dict?
49.Як створюється об’єкт в Python, для чого __new__, навіщо __init__?
50.Що знаєте з модуля collections, якими ще built-in модулями користувались?
51.Що таке шаблонізатор та як у ньому виконувати базові операції (об’єднувати ділянки шаблона, виводити дату, виводити дані з серверного боку)?
52.Як Python працює з HTTP-сервером?
53.Що відбувається, коли створюється віртуальне середовище?

Бази даних:
54.Які є базові методи роботи з SQL- базою даних у Python?
55.Що таке SQL-транзакція?
56.Як зробити вибірку із SQL-бази з простою агрегацією?
57.Який вигляд має запит, який виконує JOIN між таблицями й до самих себе?
58.Як відправляти запити у SQL-базу даних без ORM?

Алгоритми:
59.Що таке алгоритми (наприклад, Big-O notation)?
60.Які є базові алгоритми сортування?
61.Що таке Bubble Sort і як це працює?
62.Що таке лінійна складність сортування?

Запитання для Middle
Якщо джуніору все треба підказувати й допомагати, то мідл може самостійно взяти щось нове і швидко його вивчити та зрозуміти. У нього накопичено достатньо знань і досвіду, щоб швидко опановувати нове. Він може прийти й обговорити з досвідченішим розробником, проконсультуватись, але остаточних рішень не ухвалює.

Зазвичай у мідлів запитують:

63.Чи орієнтуєтесь в *nix, можете писати скрипти/автоматизацію для себе і колег?
64.Що таке багатопотоковість?
65.Що таке архітектура вебсервісів?
66.Як працює сучасний навантажений вебзастосунок (намалювати й обговорити приблизну архітектуру, наприклад, Twitter чи Instagram)?
67.Що потрібно для сайту/сервісу середнього розміру (redis\celery\кеш\логування\метрики)?
68.Як написати, задеплоїти та підтримувати (мікро) сервіс?
69.Як масштабувати API?
70.Як проводити Code review?
71.Що таке абстрактна фабрика, як її реалізувати й навіщо її застосовують?
72.Що таке цикломатична складність?

Python:
73.Async Python: як працює, навіщо, що під капотом?
74.Порівняти асинхронні web-фреймворки.
75.Що таке модель пам’яті Python?
76.Що таке SQLAlchemy (Core та ORM частин) і які є альтернативи?
77.Принципи роботи та механізм Garbage collection, reference counting?
78.Як працює thread locals?
79.Що таке _slots_?
80.Як передаються аргументи функцій у Python (by value or reference)?
81.Що таке type annotation?
82.Для чого використовують нижні підкреслення в іменах класів?
83.Статичні аналізатори: Flake8, Pylint, Radon.

Бази даних:
84.Різниця між SQL і NoSQL?
85.Як оптимізувати SQL-запити?
86.Які є рівні ізоляції транзакцій?
87.Які є види індексів?
88.Точкові питання з вибору БД, рушіїв БД?
89.Front-end: чи є досвід роботи із «сучасним» JS (Babel, Webpack, TS, ES)?
90.DevOps: чи працювали з Docker-контейнерами, пояснити основні терміни K8s (кластер, pod, node, deployment, service), що таке Kibana?
91.Алгоритми: що таке часова складність алгоритму (time complexity)?
92.Поглиблені знання Linux: як зайти на зовнішній сервер, працювати з пакетами, налаштувати середовище та виконувати операції?
93.Специфічно для Data Science: як працювати з пакетами для обробки та візуалізації даних (NumPy, Pandas та інші)?

Запитання для Senior
На співбесідах із Senior’ами зазвичай мало говорять про теоретичний бік технології, більше обговорюють конкретний досвід розробника. Тому формалізованих питань тут немає. Проте прикладом можуть бути:

94.Що таке @property?
95.Яким чином можна запустити код на Python паралельно?
96.Як працювати зі stdlib?
97.Які завдання вирішували за допомогою метакласів?
98.Що таке дескриптори?
99.Знання інших мов, крім Python (досвід).
100.Які технологічні особливості реалізації розподілених систем?
101.Які є низькорівневі особливості мов і фреймворків?
102.Способи та методи керування пам’яттю.